#include "Wire.h" // This library allows you to communicate with I2C devices.
#include "Servo.h"

const int MPU_ADDR = 0x68; // I2C address of the MPU-6050. If AD0 pin is set to HIGH, the I2C address will be 0x69.
int16_t accelerometer_x, accelerometer_y, accelerometer_z; // variables for accelerometer raw data
int16_t gyro_x, gyro_y, gyro_z; // variables for gyro raw data

int16_t veloc = 0;
int16_t velocX = 0;
int16_t velocY = 0;
int16_t veloctotal = 0;


const int ledPin = 4;
float temperature; // variables for temperature data
char tmp_str[7]; // temporary variable used in convert function

char* convert_int16_to_str(int16_t i) { // converts int16 to string. Moreover, resulting strings will have the same length in the debug monitor.
  sprintf(tmp_str, "%6d", i);
  return tmp_str;
}

int servoPin = 9;
Servo servo;
int servoAngle = 0;

void setup() {
  Serial.begin(9600);
  servo.attach(servoPin);
  Wire.begin();
  Wire.beginTransmission(MPU_ADDR); // Begins a transmission to the I2C slave (GY-521 board)
  Wire.write(0x6B); // PWR_MGMT_1 register
  Wire.write(0); // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
}

void loop() {
  servo.write(45);      // Turn SG90 servo Left to 45 degrees
  delay(100);          // Wait 1 second
  servo.write(136);      // Turn SG90 servo back to 90 degrees (center position)
  delay(100);          // Wait 1 second
   
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
  Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
  Wire.requestFrom(MPU_ADDR, 7*2, true); // request a total of 7*2=14 registers
  int ledVal = analogRead(ledPin);
  
  // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
  accelerometer_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
  accelerometer_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
  accelerometer_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)
  
  
  veloc = (accelerometer_z * 10) / 10000;
  velocX = (accelerometer_x * 10) / 10000;
  velocY = (accelerometer_y * 10) / 10000;
  veloctotal = (veloctotal /3);
  Serial.print("Velocity: "); 
  Serial.print(veloctotal);
  veloctotal = veloc + velocX +velocY;
  
  if(veloctotal<1){ //29
    Serial.println("Dropped!!!");
    digitalWrite(4, HIGH);
  } else {
    digitalWrite(4, LOW);
  }

  Serial.println();
  
  // delay
  delay(5);
}
